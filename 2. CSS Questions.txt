// CSS

1. CSS Selectors:
    a. Descendent: div a : All nested <a> tag inside div
    b. Direct Child: div > a : Not all nested, but only the direct Child
    c. General Sibling: div ~ a : a(ns) div a(s) a(s)
    d. Adjacent Sibling: div + a : a(s) div a(s)
    e. Or selector: div, a : all div tags & a tags
    f. And selecor: div.c : All divs with c class

2. Diff between pasedo element & pseudo class

3. Pseudo element:
    div::before - Creates an empty element directly before the children of selected element(div)
    div::after - Creates an empty element directly after the children of selected element(div)

    It is often used to add cosmetic content to an element with the content property. 
    
    It is inline by default.
    
    If the content property is not specified, has an invalid value, or has normal or none as a value, 
    then the ::before pseudo-element is not rendered. It behaves as if display: none is set.
    
    example:
        .local-link::before {
            content: url('../../media/examples/firefox-logo.svg');
            display: inline-block;
            width: 15px;
            height: 15px;
            margin-right: 5px;
        }

4. Pseudo Class:
    button:hover{ styling }
    :focus, :disabled, :required, :first-child, :last-child

5. CSS Box model:
    Includes content, padding, border, margin.

6. Property to configure CSS Box model: box-sizing

7. Default property of box-sizing: content-box
    where css width is width of content.
    Padding & Border are extra

    .box {
        width: 350px;
        height: 150px;
        margin: 10px;
        padding: 25px;
        border: 5px solid black;
    }
    
    The actual space taken up by the box will be 410px wide (350 + 25 + 25 + 5 + 5) and 210px high (150 + 25 + 25 + 5 + 5).

8. box-sizing: border-box:
    .box {
        width: 350px;
        inline-size: 350px;
        height: 150px;
        block-size: 150px;
        margin: 10px;
        padding: 25px;
        border: 5px solid black;
    }
    Now, the actual space taken up by the box will be 350px in the inline direction and 150px in the block direction.

9. CSS Positioning: What re different values of position property?
    a. static (default):
        HTML elements are positioned static by default.
        Static positioned elements are not affected by the top, bottom, left, and right properties.

    b. relative: 
        An element with position: relative; is positioned relative to its normal position.

        Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be 
        adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.
    
    c. fixed:
        An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. 
        The top, right, bottom, and left properties are used to position the element.

    d. absolute:
        An element with position: absolute; is positioned to the nearest relative positioned ancestor 
        (instead of positioned relative to the viewport, like fixed).

    e. sticky:
        An element with position: sticky; is positioned based on the user's scroll position.

        A sticky element toggles between relative and fixed, depending on the scroll position. 
        It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).

10. static & relative keep their natural space in flow of the document. absolute & fixed doesn't.

11. CSS Specificity Order:

    From low to high priority:
        a. Universal selector: (*)
        b. Element selector : p, div etc
        c. Class selector
        d. ID selector
        e. Inline style
        f. Declarations marked !important

12. display properties:
    a. inline (default): Displays an element as an inline element (like <span>). Any height and width properties will have no effect. This is default.	
    b. block: Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width	

    c. inline-block: https://www.w3schools.com/css/css_inline-block.asp
        Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.

        Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.

        Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, 
        so the element can sit next to other elements.

13. Difference between display: none & visibility: hidden:
        visibility:hidden hides the element, but it still takes up space in the layout.

        display:none removes the element from the document. It does not take up any space in DOM.

14. How to build layouts in CSS?

15. What are disadvantages of float:
        The float property specifies whether an element should float to the left, right, or not at all.

        Note: Absolutely positioned elements ignore the float property!

        Note: Elements next to a floating element will flow around it. 
        To avoid this, use the clear property or the clearfix hack (see example at the bottom of this page).

        <div class="clearfix">
            <img class="img2" src="pineapple.jpg" alt="Pineapple" width="170" height="170">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet...
        </div>

        div {
            border: 3px solid #4CAF50;
            padding: 5px;
        }

        .img2 {
            float: right;
        }

        .clearfix::after {
            content: "";
            clear: both;
            display: table;
        }

16. Make a div at center of page:
    <div class="container">
      <div class="circle">

      </div>
    </div>

    .container {
        width: 500px;
        height: 250px;
        margin: 50px;
        outline: solid 1px black;
    }

    .circle {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: black;
    }

    Solution 1:
    .container {
       
        Add the following to container

        display: flex;
        justify-content: center;
        align-items: center;
    }

    Solution 2: 

    .circle{
        margin-left: auto;
        margin-right: auto;
    }

    Solution 3:

    Add to circle class:

        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);

17. What does translate (-50%, -50%) does here

18. The flex container properties are:

        flex-direction: row | row-reverse | column | column-reverse
        flex-wrap: wrap | no-wrap(default) : The flex-wrap property specifies whether the flex items should wrap or not.
        flex-flow: flex-direction flex-wrap;
        justify-content:
            flex-start	Default value. Items are positioned at the beginning of the container	
            flex-end	Items are positioned at the end of the container	
            center	Items are positioned in the center of the container	
            space-between	Items will have space between them	
            space-around	Items will have space before, between, and after them	
            space-evenly	Items will have equal space around them	
            initial	Sets this property to its default value. Read about initial	
            inherit
        align-items
            normal	Default. Behaves like 'stretch' for flexbox and grid items, or 'start' for grid items with a defined block size.	
            stretch	Items are stretched to fit the container	
            center	Items are positioned at the center of the container	
            flex-start	Items are positioned at the beginning of the container	
            flex-end	Items are positioned at the end of the container	
            start	Items are positioned at the beginning of their individual grid cells, in the block direction	
            end	Items are positioned at the end of the their individual grid cells, in the block direction	
            baseline	Items are positioned at the baseline of the container	
            initial	Sets this property to its default value. Read about initial	
            inherit	Inherits this property from its parent element. Read about inherit	
        align-content
            stretch	Default value. Lines stretch to take up the remaining space	
            center	Lines are packed toward the center of the flex container	
            flex-start	Lines are packed toward the start of the flex container	
            flex-end	Lines are packed toward the end of the flex container	
            space-between	Lines are evenly distributed in the flex container	
            space-around	Lines are evenly distributed in the flex container, with half-size spaces on either end	
            space-evenly	Lines are evenly distributed in the flex container, with equal space around them	
            initial	Sets this property to its default value. Read about initial	
            inherit	Inherits this property from its parent element. Read about inherit


19. CSS Grid:
    .grid-container{
        display: grid;
        grid-template-columns: 200px 200px 100px 100px;
        grid-template-rows: 300px 200px;
        column-gap: 30px;
        row-gap: 60px;
    }
